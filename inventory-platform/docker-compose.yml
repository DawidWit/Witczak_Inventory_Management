version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Service
  backend:
    build: 
      context: ./apps/backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
    networks:
      - inventory_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # PgAdmin for Database Management (Development)
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@inventory.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - inventory_network
    profiles:
      - dev  # Only run in development

  # Future: React Web Frontend
  # web:
  #   build: 
  #     context: ./web
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./web:/app
  #     - /app/node_modules
  #   networks:
  #     - inventory_network
  #   depends_on:
  #     - backend

volumes:
  postgres_data:

networks:
  inventory_network:
    driver: bridge
